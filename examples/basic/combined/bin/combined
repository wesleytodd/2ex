#! /usr/bin/env node
'use strict'
const {startService, createLogger} = require('2ex')

// Do some environment integrations, probably
// config loading and file system interactions
// to load host and port.  For example, this loads
// it from the package.json
const pkg = require('../package.json')

// Create a logger so we can configure and use it here,
// pass it in to the service so it doesn't create it's own
var log = createLogger({
  logLevel: 'error'
})

// Require the service file, doesn't start the service
const service = require('..')

// Call the service main, also doesn't start the service
service({
  logger: log,
  title: pkg.title,
  host: pkg.config.host,
  port: pkg.config.port
}, (err, app) => {
	if (err) {
    log.error(err)
    process.exit(1)
    return
	}

  // Now that we have bootstraped the service,
  // go ahead and start it up
  startService(app, (err, server) => {
    if (err) {
      log.emergency(err)
      process.exit(1)
      return
    }
    
    // Do things which integrate to the
    // environment after the server is started.
    // For example, notify a service discovery layer
    // of your new service, like consul:
    //
    //  var port = server.addr().port
    //  var title = app.get('title')
    //  request({
    //    method: 'PUT',
    //    url: 'http://localhost:8500/v1/agent/service/register',
    //    json: {
    //      id: title + '-' + String(port) + '-' + String(process.pid),
    //      name: title,
    //      port: port
    //    }
    //  }, function (err, response, body) {
    //    // ...
    //  });
  })
})
